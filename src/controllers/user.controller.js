import { asyncHandler } from "../utils/asynchandler.js"
import {ApiError} from "../utils/ApiError.js"
import { User } from "../models/user.model.js"
import {uploadOncloudnairy} from "../utils/Cloudnary.js"
import { ApiResponse } from "../utils/ApiResponse.js"

const registerUser = asyncHandler( async(req,res)=>{
   // get user details from frontend
   // check user details using middleware (not eMPTY ,ETC..)
   // check user already exist using username and email
   // check for images
   // check for avatar
   // upload avatar to cloudnary, avatar check
   // create user object  - create entry in db
   // remove password and refresh token field from response
   // check for usercreation
   // return error

    const {fullname, email, username, password} = req.body
    console.log("email", email);


    // check if fields are empty or not
    if (
        [fullname,email,username,password].some((field) => field.trim() === "")
    ) {
        throw new ApiError(400, " all field are required")
    }

    // For proper formate of email
    // if (/^"[\w-\.]+@([\w-]+\.)+[\w-]"{2,4}$/.test(email)) {
    //     throw new ApiError(400, " Enter a valid E-mail address")
    // }
    // Check weather User Already exist or not
   const ExistedUser= await User.findOne({
        $or: [{username},{email}]
      
    })
    console.log(ExistedUser)
    if(ExistedUser){
        throw new ApiError(409, "User with same Username or E-mail already exist ")
    }

      // bringing the local File path of avatar and cover Image
   const avatarLocalPath = req.files?.avatar[0]?.path
   const coverImageLocalPath = req.files?.avatar[0]?.path
   
   // Checking if avatar is succesfully uploaded to temporary storage
   if ( !avatarLocalPath){
         throw new ApiError(400, "Avatar file is required")
   }
    await uploadOncloudnairy(avatarLocalPath)
   const coverImage= await uploadOncloudnairy(coverImageLocalPath)

     // Final check if avatr is uploaded to cloudnary.
   if (!avatar){
    throw new ApiError(400, "Avatar file is required")
   }

   // Check if User is properly created in DB
  const user= await User.create({
    fullname,
    avatar: avatar.url,
    coverImage: coverImage?.url || "",
    email,
    password,
    username: username.toLowerCase()
   })
      // Check performed by the help of id generated by DB
    const createdUser= await User.findById(user._id).select(
        "-password -refreshTokens"
    )
    if (!createdUser){
       throw new ApiError(500, "Something went wrong while registering a user")
    }

    // If created then here we return the response to the User
    return res.status(201).json(
        new ApiResponse(200, createdUser,"User Register Successfully")
    );
})


export {
    registerUser,
}
